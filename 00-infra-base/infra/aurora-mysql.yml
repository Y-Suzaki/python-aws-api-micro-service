AWSTemplateFormatVersion: 2010-09-09
Description: Create Aurora MySQL.
Parameters:
  Env:
    Type: String
    Default: dev

Resources:
  # RDS Setting
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS(Aurora MySQL) subnet group.
      SubnetIds:
        - Fn::ImportValue:
            !Sub ys-dev-web-private-subnet-a-${Env}
        - Fn::ImportValue:
            !Sub ys-dev-web-private-subnet-c-${Env}

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Parameter group for aurora mysql8.0
      Family: aurora-mysql8.0
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
      Tags:
        - Key: Name
          Value: !Sub ys-dev-web-aurora-musql8.0-${Env}

  # Security Group
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Security Group.
      VpcId:
        Fn::ImportValue:
          !Sub ys-dev-web-vpc-${Env}
      Tags:
        - Key: Name
          Value: !Sub ys-dev-web-application-${Env}

  SSMApplicationSecurityGroup: # 渡す値をParameter Storeに保存する
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ys-dev-web-${Env}/ApplicationSecurityGroup
      Type: String
      Value: !Ref ApplicationSecurityGroup

  RDSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Proxy Security Group.
      VpcId:
        Fn::ImportValue:
          !Sub ys-dev-web-vpc-${Env}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Sub "{{resolve:ssm:/ys-dev-web-${Env}/BastionSecurityGroup}}"
      Tags:
        - Key: Name
          Value: !Sub ys-dev-web-rds-security-${Env}

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub ys-dev-web-vpc-${Env}
      GroupDescription: Allow Aurora MySQL (TCP3306)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref RDSProxySecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Sub "{{resolve:ssm:/ys-dev-web-${Env}/BastionSecurityGroup}}"
      Tags:
        - Key: Name
          Value: !Sub ys-dev-web-aurora-mysql-${Env}

  # RDS Cluster
  RDSMasterUserSecretArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Auora MySQL 8.0 Secret.
      GenerateSecretString:
        ExcludeCharacters: '"@/\'
        GenerateStringKey: 'password'
        SecretStringTemplate: '{"username": "admin"}'
        PasswordLength: 16
      Name: !Sub /ys-dev-web/aurora-mysql-${Env}

  RDSDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBClusterIdentifier: !Sub ys-dev-web-user-db-cluster-${Env}
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      Engine: aurora-mysql
      EngineMode: provisioned
      # aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"
      EngineVersion: 8.0.mysql_aurora.3.02.0
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSMasterUserSecretArn}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSMasterUserSecretArn}:SecretString:password}}'
      Port: 3306
      PreferredBackupWindow: 15:25-15:55
      PreferredMaintenanceWindow: Tue:16:05-Tue:16:35
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref RdsSecurityGroup

  DBClusterSecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn: RDSDBCluster
    Properties:
      SecretId: !Ref RDSMasterUserSecretArn
      TargetId: !Ref RDSDBCluster
      TargetType: AWS::RDS::DBCluster

  DBInstanceFirst:
    Type: AWS::RDS::DBInstance
    DependsOn: RDSDBCluster
    Properties:
      DBClusterIdentifier: !Ref RDSDBCluster
      DBInstanceIdentifier: !Sub ys-dev-web-user-db-instance-first-${Env}
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.0
      DBInstanceClass: db.t4g.medium

  # RDS Proxy
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "secret_manager_policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
              -
                Effect: "Allow"
                Action: kms:Decrypt
                Resource: "*"

  RDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref RDSMasterUserSecretArn
          IAMAuth: DISABLED
      DBProxyName: !Sub ys-dev-web-user-db-proxy-${Env}
      EngineFamily: MYSQL
      IdleClientTimeout: 120
      RequireTLS: false
      RoleArn: !GetAtt RDSProxyRole.Arn
      VpcSecurityGroupIds:
        - !Ref RDSProxySecurityGroup
      VpcSubnetIds:
        - Fn::ImportValue:
            !Sub ys-dev-web-private-subnet-a-${Env}
        - Fn::ImportValue:
            !Sub ys-dev-web-private-subnet-c-${Env}

  RDSProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref RDSProxy
      DBClusterIdentifiers:
        - !Ref RDSDBCluster
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        MaxConnectionsPercent: 100
        MaxIdleConnectionsPercent: 50
        ConnectionBorrowTimeout: 120

  # SSM Parameter Store
  SSMRDSWriterEndpoint: # 渡す値をParameter Storeに保存する
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ys-dev-web-${Env}/RDSWriterEndpoint
      Type: String
      Value: !GetAtt RDSDBCluster.Endpoint.Address

  SSMRDSReaderEndpoint: # 渡す値をParameter Storeに保存する
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ys-dev-web-${Env}/RDSReaderEndpoint
      Type: String
      Value: !GetAtt RDSDBCluster.ReadEndpoint.Address

  SSMRDSProxyWriterEndpoint: # 渡す値をParameter Storeに保存する
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ys-dev-web-${Env}/RDSProxyWriterEndpoint
      Type: String
      Value: !GetAtt RDSProxy.Endpoint

Outputs:
  RDSWriterEndpoint:
    Value: !GetAtt RDSDBCluster.Endpoint.Address
  RDSReaderEndpoint:
    Value: !GetAtt RDSDBCluster.ReadEndpoint.Address
  RDSProxyWriterEndpoint:
    Value: !GetAtt RDSProxy.Endpoint
